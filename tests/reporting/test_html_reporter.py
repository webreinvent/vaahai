"""
Unit tests for the HTML reporter module.
"""

import os
import re
from datetime import datetime
import pytest

from vaahai.reporting.html_reporter import HTMLReporter, generate_html_report


class TestHTMLReporter:
    """Test cases for the HTMLReporter class."""
    
    def test_generate_report_success(self):
        """Test generating an HTML report for successful results."""
        # Create a simple test result
        result = {
            "status": "success",
            "message": "Code review completed successfully",
            "total_issues": 2,
            "results": [
                {
                    "step_id": "test_step",
                    "step_name": "Test Step",
                    "step_category": "test_category",
                    "step_severity": "medium",
                    "file_path": "test_file.py",
                    "issues": [
                        {
                            "line": 10,
                            "message": "Test issue 1",
                            "code": "def test_function():"
                        },
                        {
                            "line": 15,
                            "message": "Test issue 2",
                            "code": "    return 'test'"
                        }
                    ]
                }
            ]
        }
        
        # Generate the report
        reporter = HTMLReporter(result)
        report = reporter.generate_report()
        
        # Basic validation
        assert "<!DOCTYPE html>" in report
        assert "<html lang=\"en\">" in report
        assert "<title>VaahAI Code Review Report</title>" in report
        assert "<h1>VaahAI Code Review Report</h1>" in report
        assert "<h2>Summary</h2>" in report
        assert "Code review completed successfully" in report
        assert "Test Step" in report
        assert "Test issue 1" in report
        assert "Test issue 2" in report
        assert "test_function" in report
        assert "return" in report
        assert "Generated by VaahAI Code Review" in report
    
    def test_generate_report_error(self):
        """Test generating an HTML report for error results."""
        # Create an error result
        result = {
            "status": "error",
            "message": "An error occurred during code review"
        }
        
        # Generate the report
        reporter = HTMLReporter(result)
        report = reporter.generate_report()
        
        # Basic validation
        assert "<!DOCTYPE html>" in report
        assert "<html lang=\"en\">" in report
        assert "<title>VaahAI Code Review Error</title>" in report
        assert "<h1>Code Review Error</h1>" in report
        assert "<h2>Error Details</h2>" in report
        assert "<strong>Status:</strong> Error" in report
        assert "<strong>Message:</strong> An error occurred during code review" in report
        assert "Generated by VaahAI Code Review" in report
    
    def test_generate_report_with_key_findings(self):
        """Test generating an HTML report with key findings."""
        # Create a test result with key findings
        result = {
            "status": "success",
            "message": "Code review completed successfully",
            "total_issues": 3,
            "results": [],
            "key_findings": [
                {
                    "type": "severity",
                    "severity": "critical",
                    "count": 1,
                    "message": "Critical security issue found"
                },
                {
                    "type": "severity",
                    "severity": "medium",
                    "count": 2,
                    "message": "Medium code quality issues found"
                }
            ]
        }
        
        # Generate the report
        reporter = HTMLReporter(result)
        report = reporter.generate_report()
        
        # Basic validation
        assert "<h2>Key Findings</h2>" in report
        assert "Critical security issue found" in report
        assert "Medium code quality issues found" in report
        assert "severity-critical" in report
        assert "severity-medium" in report
    
    def test_generate_report_with_recommendations(self):
        """Test generating an HTML report with recommendations."""
        # Create a test result with recommendations
        result = {
            "status": "success",
            "message": "Code review completed successfully",
            "total_issues": 2,
            "results": [],
            "recommendations": [
                "Fix security issues",
                "Improve code quality"
            ]
        }
        
        # Generate the report
        reporter = HTMLReporter(result)
        report = reporter.generate_report()
        
        # Basic validation
        assert "<h2>Actionable Recommendations</h2>" in report
        assert "<ol>" in report
        assert "<li>Fix security issues</li>" in report
        assert "<li>Improve code quality</li>" in report
    
    def test_generate_report_with_statistics(self):
        """Test generating an HTML report with statistics."""
        # Create a test result with statistics
        result = {
            "status": "success",
            "message": "Code review completed successfully",
            "total_issues": 5,
            "results": [],
            "statistics": {
                "total_files": 2,
                "files_with_issues": 1,
                "files_with_issues_percentage": 50.0,
                "total_issues": 5,
                "issues_per_file": 2.5,
                "issues_by_severity": {
                    "critical": 1,
                    "high": 1,
                    "medium": 2,
                    "low": 1
                },
                "issues_by_category": {
                    "security": 2,
                    "code_quality": 3
                },
                "most_common_issues": [
                    ["Code quality issue", 3],
                    ["Security issue", 2]
                ]
            }
        }
        
        # Generate the report
        reporter = HTMLReporter(result)
        report = reporter.generate_report()
        
        # Basic validation
        assert "<h2>Statistics</h2>" in report
        assert "<h3>File Statistics</h3>" in report
        assert "<li><strong>Total Files:</strong> 2</li>" in report
        assert "<li><strong>Files with Issues:</strong> 1 (50.0%)</li>" in report
        assert "<h3>Issues by Severity</h3>" in report
        assert "<h3>Issues by Category</h3>" in report
        assert "<h3>Most Common Issues</h3>" in report
        assert "Code quality issue" in report
        assert "Security issue" in report
    
    def test_generate_report_with_file_results(self):
        """Test generating an HTML report with file results."""
        # Create a test result with file results
        result = {
            "status": "success",
            "message": "Code review completed successfully",
            "total_issues": 3,
            "file_results": [
                {
                    "file_path": "test_file1.py",
                    "total_issues": 2,
                    "results": [
                        {
                            "step_id": "test_step1",
                            "step_name": "Test Step 1",
                            "step_category": "test_category",
                            "step_severity": "medium",
                            "issues": [
                                {
                                    "line": 10,
                                    "message": "Test issue 1",
                                    "code": "def test_function1():"
                                },
                                {
                                    "line": 15,
                                    "message": "Test issue 2",
                                    "code": "    return 'test1'"
                                }
                            ]
                        }
                    ]
                },
                {
                    "file_path": "test_file2.py",
                    "total_issues": 1,
                    "results": [
                        {
                            "step_id": "test_step2",
                            "step_name": "Test Step 2",
                            "step_category": "test_category",
                            "step_severity": "high",
                            "issues": [
                                {
                                    "line": 20,
                                    "message": "Test issue 3",
                                    "code": "def test_function2():"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
        
        # Generate the report
        reporter = HTMLReporter(result)
        report = reporter.generate_report()
        
        # Basic validation
        assert "<h2>Issues by File</h2>" in report
        assert "<h3>test_file1.py (2 issues)</h3>" in report
        assert "<h3>test_file2.py (1 issues)</h3>" in report
        assert "Test Step 1" in report
        assert "Test Step 2" in report
        assert "Test issue 1" in report
        assert "Test issue 2" in report
        assert "Test issue 3" in report
    
    def test_highlight_code(self):
        """Test code highlighting functionality."""
        # Create a simple test result with code
        result = {
            "status": "success",
            "message": "Code review completed successfully",
            "total_issues": 1,
            "results": [
                {
                    "step_id": "test_step",
                    "step_name": "Test Step",
                    "step_category": "test_category",
                    "step_severity": "medium",
                    "file_path": "test_file.py",
                    "issues": [
                        {
                            "line": 10,
                            "message": "Test issue",
                            "code": "def test_function():\n    return 'test'"
                        }
                    ]
                }
            ]
        }
        
        # Generate the report
        reporter = HTMLReporter(result)
        report = reporter.generate_report()
        
        # Check if the code is highlighted
        assert "<div class=\"code-block\">" in report
        assert "<div class=\"highlight\">" in report
        # The exact HTML output of Pygments can vary, but it should contain the code
        assert "test_function" in report
        assert "return" in report
        assert "test" in report
    
    def test_generate_html_report_helper(self):
        """Test the generate_html_report helper function."""
        # Create a simple test result
        result = {
            "status": "success",
            "message": "Code review completed successfully",
            "total_issues": 1,
            "results": [
                {
                    "step_id": "test_step",
                    "step_name": "Test Step",
                    "step_category": "test_category",
                    "step_severity": "medium",
                    "file_path": "test_file.py",
                    "issues": [
                        {
                            "line": 10,
                            "message": "Test issue",
                            "code": "def test_function():"
                        }
                    ]
                }
            ]
        }
        
        # Generate the report using the helper function
        report = generate_html_report(result)
        
        # Basic validation
        assert "<!DOCTYPE html>" in report
        assert "<html lang=\"en\">" in report
        assert "<title>VaahAI Code Review Report</title>" in report
        assert "<h1>VaahAI Code Review Report</h1>" in report
        assert "Test Step" in report
        assert "Test issue" in report
        assert "test_function" in report


def test_integration_with_cli():
    """Test integration with the CLI command."""
    # This is more of an integration test that would require mocking the CLI
    # For now, we'll just check that the imports work
    try:
        from vaahai.cli.commands.review.command import run
        from vaahai.reporting.formats import OutputFormat
        assert True  # If we get here, the imports worked
    except ImportError:
        pytest.fail("Failed to import CLI command or OutputFormat")

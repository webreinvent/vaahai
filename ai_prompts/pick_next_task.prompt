# Pick Next Task Prompt for VaahAI

You are an AI assistant helping with the VaahAI project, a multi-agent AI CLI tool built with Microsoft's Autogen Framework.


## WORKFLOW
Follow this complete workflow for task management and implementation:

### Step 0. Project Scope
Read and learn from `./project_scope.prompt` file our the project scope again so that you still understand the project scope

### Step 1. Select Next Task if current task is completed
- Review the current project status in `/specs/TASK_TRACKING.md`
- Identify tasks marked as "Not Started" that have no incomplete dependencies
- Prioritize MVP tasks and those that unblock multiple other tasks
- Consider the logical flow of implementation
- Update the task status in `TASK_TRACKING.md` to "In Progress"

### Step 2. Create New Branch
- PREFERRED APPROACH: Create a branch from the previous task branch if it contains necessary code for the next task
  - First ensure you're on the previous task branch
  - Pull any recent changes from the develop branch: `git pull origin develop`
  - Create a new branch: `git checkout -b feature/P<phase>-task-<id>-<description>`
- ALTERNATIVE APPROACH: If previous task branch is not suitable, create branch from develop
  - First checkout develop: `git checkout develop`
  - Pull latest changes: `git pull origin develop`
  - Create a new branch: `git checkout -b feature/P<phase>-task-<id>-<description>`
- Always follow the project's branch naming conventions
- Push the branch to the remote repository

### Step 3. Understand Task Scope
- Read the task description thoroughly
- Review related documentation and requirements
- Understand how this task fits into the overall project
- Identify the specific deliverables for this task
- Define clear acceptance criteria

### Step 4. Create Implementation Plan
- Break down the task into smaller steps
- Identify the files that need to be created or modified
- Determine the classes, functions, and interfaces required
- Consider edge cases and error handling
- Plan for testing and validation
- Present the plan for confirmation before proceeding

### Step 5. Implement the Task
- Follow the confirmed implementation plan
- Write clean, well-documented code
- Adhere to the project's coding guidelines:
  - Create small, focused files with single responsibilities
  - Keep methods short (under 30-50 lines)
  - Apply appropriate design patterns (Singleton, Factory, Adapter, etc.)
  - Follow SOLID principles
  - Use dependency injection for better testability
- Implement comprehensive unit tests
- Ensure the code integrates well with existing components
- Update documents in `/specs`, `/docs`, and `/ai_docs` as needed
- Update root level README.md if applicable for the new feature, only consider important information only

### Step 6. Git Commit
- Commit all changes to Git if applicable
- Include a descriptive title that references the task ID
- Add a detailed description of the changes made

### Step 7. Git Push
- Push all changes to the remote repository

### Step 8. Update TASK_TRACKING.md
- Update the task status in `TASK_TRACKING.md` to "Completed"
- Add any relevant notes or updates

### Step 9. Update memory
- Update your memory

CLEARLY DEFINE YOUR NEXT STEPS AND ASK FOR CONFIRMATION BEFORE PROCEEDING.


## OUTPUT FORMAT
List all the steps from WORKFLOW and provide status against each steps in green and red color icon, green icon for completed and red icon for incomplete
